---

main_username: user0
ntp_timezone: America/Los_Angeles

docker_compose_debug_print: true
docker_compose_debug_halt: false

nas_cache_path: '/mnt/cache1'
nas_download_path: '{{ nas_cache_path }}/downloads'
nas_storage_path: '/mnt/storage'
docker_compose_path: '/opt/docker'
docker_appdata_path: '/home/{{ main_username }}/docker/media-server/config/appdata'
docker_appdata_folders_to_own:
- backrest
- fail2ban
- gaseous-server
- jellyfin
- maintainerr
- navidrome
- notifiarr
- recyclarr

# -----
# fuzzymistborn.autorestic
# -----
autorestic_download_latest_ver: false
autorestic_pinned_ver: 1.8.3
restic_download_latest_ver: false
restic_pinned_ver: 0.17.3

autorestic_config_user: "{{ main_username}}"
autorestic_user_directory: /home/"{{ main_username}}"
autorestic_run_check: true
autorestic_config_yaml:
  version: 2
  backends:
    nas_storage:
      type: local
      path: "{{ nas_storage_path }}/backups-restic"
      requireKey: true
      key: "{{ secret_restic_backend_keys | selectattr('name', 'equalto', 'nas_storage') | map(attribute='key') | first }}"
      options:
        forget:
          keep-daily: 14 # keep X last daily snapshots
    b2_docker:
      type: s3
      path: "{{ secret_docker_backup_b2_uri }}"
      key: "{{ secret_docker_backup_restic_password}}"
      env:
        AWS_ACCESS_KEY_ID: "{{ secret_docker_backup_b2_bucket_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ secret_docker_backup_b2_bucket_application_key}}"
  locations:
    docker_appdata:
      from:
        - "{{ docker_appdata_path}}"
      to:
      #  - nas_storage
        - b2_docker
      forget: prune # Or only "yes" if you don't want to prune
      cron: '0 8 * * *' # Every day at 8:00
      hooks:
        prevalidate:
          - echo "Hook prevalidate"
        before:
          - echo "Hook before"
          - 'curl -m 10 --retry 5 -X POST -H "Content-Type: text/plain" --data "Starting backup for location: ${AUTORESTIC_LOCATION}" {{ secret_restic_cron_healthcheck_uri }}/start'
        failure:
          - echo "Hook failure"
          - 'curl -m 10 --retry 5 -X POST -H "Content-Type: text/plain" --data "Backup failed for location: ${AUTORESTIC_LOCATION}" {{ secret_restic_cron_healthcheck_uri }}/fail'
        success:
          - echo "Hook success"
          - 'curl -m 10 --retry 5 -X POST -H "Content-Type: text/plain" --data "Backup successful for location: ${AUTORESTIC_LOCATION}" {{ secret_restic_cron_healthcheck_uri }}'
        after:
          - echo "Hook after"
      options:
        forget:
          # keep-last: 5 # always keep at least X snapshots
          # keep-hourly: 3 # keep X last hourly snapshots
          keep-daily: 14 # keep X last daily snapshots
          keep-weekly: 8 # keep X last weekly snapshots
          # keep-monthly: 12 # keep X last monthly snapshots
          # keep-yearly: 7 # keep X last yearly snapshots
          # keep-within: '14d' # keep snapshots from the last X days
        backup:
          exclude:
            - "**/cache"
            - "**/log"
            - "**/logs"
            - "*.log*"
            - ".cache"
            - "backups/manual"
            - "**/MediaCover"
            - "**/Metadata"
            - "**/Signatures"
            - "**/gaseous-server/Data/**"
            - "**/Temp"
            - "**/ollama/**"
            - "**/apprise/**"
            - "**/whatsupdocker/**"
            - "**/backrest/**"
            - "**/romm/**"
            - "**/romm-db/**"
            

# -----
# arillso.system.users
# -----

users_list:
  - username: "{{ main_username }}"
    uid: 1000
    shell: /bin/bash
  - username: alice
    uid: 9999
    shell: /bin/bash

# -----
# grog.package
# -----
package_list:
  - name: git
  - name: curl
  - name: iperf
  - name: jq
  - name: ncdu

# -----
# jhaycr.luks_disks
# -----
luks_keyfile_path: /etc/luks.key
luks_disks_validate_serial: true

# -----
# IronicBadger.snapraid
# -----
snapraid_install: true
snapraid_runner: true

snapraid_data_disks:
  - path: /mnt/data1
    content: true
  - path: /mnt/data2
    content: true
  - path: /mnt/data3
    content: true

snapraid_parity_disks:
  - path: /mnt/parity1
    content: false
  - path: /mnt/parity2
    content: false

snapraid_content_files:
  - /var/snapraid.content

snapraid_config_excludes:
  - "*.unrecoverable"
  - /lost+found/
  - "*.!sync"
  - "*.bak"
  - /tmp/
  - backup/
  - downloads/
  - temp/
  - "aquota.group"
  - "aquota.user"
  - "snapraid.conf*"
  - "*.nfo"

snapraid_runner_cron_jobs:
  - { job: '{{ snapraid_runner_command }}', name: 'snapraid_runner', weekday: '*', hour: '01', minute: '00' }


# -----
# tigattack.mergerfs
# -----
mergerfs_mounts:
  - path: /mnt/storage
    branches:
      - /mnt/data*
    options: defaults,nonempty,allow_other,use_ino,cache.files=off,moveonenospc=true,category.create=mfs,dropcacheonclose=true,minfreespace=250G,fsname=mergerfs
