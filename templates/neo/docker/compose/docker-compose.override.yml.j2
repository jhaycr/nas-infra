########################### NETWORKS
# You may customize the network subnet (192.168.90.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  default:
    driver: bridge
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24

########################### SECRETS
#secrets:
#  traefik_forward_auth:
#    file: $DOCKERDIR/secrets/traefik_forward_auth

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228
 
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
 
# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
 
# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"

services:
    
# Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.7
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main={{ domain }}
      - --entrypoints.https.http.tls.domains[0].sans=*.{{ domain }}
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email={{ cloudflare_email }}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
    # networks:
    #  - t2_proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080 # insecure api wont work
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    environment:
      - CF_API_EMAIL={{ cloudflare_email }}
      - CF_API_KEY={{ cloudflare_api_key }}
      - DOMAINNAME_CLOUD_SERVER # Passing the domain name to the traefik container to be able to use the variable in rules. 
    volumes:
      - {{ docker_home_appdata_path }}/traefik/rules/cloudserver:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
      - {{ docker_home_appdata_path }}/traefik/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
      - {{ docker_home_appdata_path }}/traefik/logs/cloudserver/traefik.log:/traefik.log # for fail2ban - make sure to create an empty file before starting the container
      - {{ docker_home_appdata_path }}/traefik/.htpasswd:/.htpasswd
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.{{ domain }}`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main={{ domain }}"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.{{ domain }}"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" # For Basic HTTP Authentication
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    command:
      - "--whitelist={{ secret_oauth_whitelist }}"
    environment:
      #- CONFIG=/config
      - PROVIDERS_GOOGLE_CLIENT_ID={{ secret_oauth_providers_google_client_id }}
      - PROVIDERS_GOOGLE_CLIENT_SECRET={{ secret_oauth_providers_google_client_secret }}
      - SECRET={{ secret_oauth_secret }}
      - WHITELIST={{ secret_oauth_whitelist }}
      - COOKIE_DOMAIN={{ domain }}
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.{{ domain }}
      - URL_PATH=/_oauth
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
      - CONFIG=/rules
#    secrets:
#      - source: traefik_forward_auth
#        target: /config
    volumes:
      - {{ docker_home_appdata_path }}/traefik-forward-auth/rules:/rules
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.{{ domain }}`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  ############################
  ## TRAEFIK-ENABLED SERVICES
  ############################
  freshrss:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.freshrss.rule=Host(`rss.{{ domain }}`)
      - traefik.http.routers.freshrss.entrypoints=https
      - traefik.http.routers.freshrss.tls=true
      - traefik.http.routers.freshrss.middlewares=chain-oauth@file
      - traefik.http.middlewares.freshrss.headers.SSLRedirect=true
      - traefik.http.middlewares.freshrss.headers.STSSeconds=315360000
      - traefik.http.middlewares.freshrss.headers.browserXSSFilter=true
      - traefik.http.middlewares.freshrss.headers.contentTypeNosniff=true
      - traefik.http.middlewares.freshrss.headers.forceSTSHeader=true
      - traefik.http.middlewares.freshrss.headers.SSLHost=
      - traefik.http.middlewares.freshrss.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.freshrss.headers.STSPreload=true
      - traefik.http.middlewares.freshrss.headers.frameDeny=true
      - traefik.http.services.freshrss.loadbalancer.server.port=80

  komga:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.komga.rule=Host(`comics.{{ domain }}`)
      - traefik.http.routers.komga.entrypoints=https
      - traefik.http.routers.komga.tls=true
      - traefik.http.routers.komga.middlewares=chain-oauth@file
      - traefik.http.middlewares.komga.headers.SSLRedirect=true
      - traefik.http.middlewares.komga.headers.STSSeconds=315360000
      - traefik.http.middlewares.komga.headers.browserXSSFilter=true
      - traefik.http.middlewares.komga.headers.contentTypeNosniff=true
      - traefik.http.middlewares.komga.headers.forceSTSHeader=true
      - traefik.http.middlewares.komga.headers.SSLHost=
      - traefik.http.middlewares.komga.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.komga.headers.STSPreload=true
      - traefik.http.middlewares.komga.headers.frameDeny=true
      - traefik.http.services.komga.loadbalancer.server.port=25600

  overseerr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.overseerr.rule=Host(`requests.{{ domain }}`)
      - traefik.http.routers.overseerr.entrypoints=https
      - traefik.http.routers.overseerr.tls=true
      - traefik.http.routers.overseerr.middlewares=chain-oauth@file
      - traefik.http.middlewares.overseerr.headers.SSLRedirect=true
      - traefik.http.middlewares.overseerr.headers.STSSeconds=315360000
      - traefik.http.middlewares.overseerr.headers.browserXSSFilter=true
      - traefik.http.middlewares.overseerr.headers.contentTypeNosniff=true
      - traefik.http.middlewares.overseerr.headers.forceSTSHeader=true
      - traefik.http.middlewares.overseerr.headers.SSLHost=
      - traefik.http.middlewares.overseerr.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.overseerr.headers.STSPreload=true
      - traefik.http.middlewares.overseerr.headers.frameDeny=true
      - traefik.http.services.overseerr.loadbalancer.server.port=5055