name: compose
version: '3'

x-logging: &default-logging
  driver: json-file
  options:
    max-file: "10"
    max-size: 200k

x-common-keys: &common-keys
  restart: unless-stopped
  logging: *default-logging

x-common-env: &common-env
  PGID: "1000"
  PUID: "1000"
  TZ: America/Los_Angeles

x-common-volumes:
  - &localtime /etc/localtime:/etc/localtime:ro
  - &storage {{ docker_storage_path }}:/storage

include:
  - ./compose-includes/nginx-proxy-manager.yml
  - path: ./compose-includes/authentik.yml
    env_file: ./compose-includes/.env.authentik
  - ./compose-includes/gaseous.yml

services:
  audiobookshelf:
    <<: *common-keys
    container_name: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    environment:
      <<: *common-env
    networks:
      external_proxy_bridge:
    ports:
      - "13378:80"
    volumes:
      - *localtime
      - *storage
      - {{ docker_storage_path }}/media/audio/audiobooks:/audiobooks
      - {{ docker_storage_path }}/media/audio/podcasts:/podcasts
      - {{ docker_home_appdata_path }}/audiobookshelf:/config
      - {{ docker_storage_path }}/media/audio/:/metadata1
  
  backrest:
    <<: *common-keys
    image: garethgeorge/backrest:latest
    container_name: backrest
    volumes:
      - {{ docker_home_appdata_path }}/backrest/data:/data
      - {{ docker_home_appdata_path }}/backrest/config:/config
      - {{ docker_home_appdata_path }}/backrest/cache:/cache
      - {{ docker_home_appdata_path }}:/userdata # [optional] mount local paths to backup here.
      - {{ backup_path_local }}:/repos
      #- {{ docker_storage_path }}/backups:/repos # [optional] mount repos if using local storage, not necessary for remotes e.g. B2, S3, etc.
    environment:
      <<: *common-env
      BACKREST_DATA: /data # path for backrest data. restic binary and the database are placed here.
      BACKREST_CONFIG: /config/config.json # path for the backrest config file.
      XDG_CACHE_HOME: /cache # path for the restic cache which greatly improves performance.
    restart: unless-stopped
    ports:
      - 9898:9898
  
  bazarr:
    <<: *common-keys
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      <<: *common-env
    ports:
      - "6767:6767"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/bazarr:/config

  calibreweb:
    <<: *common-keys
    container_name: calibreweb
    image: lscr.io/linuxserver/calibre-web:latest
    environment:
      <<: *common-env
    networks:
      external_proxy_bridge:
    ports:
      - "8083:8083"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/calibreweb:/config
      - {{ docker_storage_path}}/storage/Books/Calibre:/books
    # https://www.reddit.com/r/selfhosted/comments/ys6n76/authentik_ldap_in_calibreweb/
    # https://www.davidbuhlman.com/calibre-web-integration-with-authentik/
    # https://www.davidbuhlman.com/calibre-web-integration-with-authentik-part-two/
    # 

  deluge:
    <<: *common-keys
    container_name: deluge
    image: linuxserver/deluge:5b398f77-ls22
    # image: lscr.io/linuxserver/deluge:latest
    environment:
      <<: *common-env
    ports:
      - "6881:6881"
      - "6881:6881/udp"
      - "8112:8112"
      - "51413:51413"
      - "51413:51413/udp"
      - "58846:58846"
      - "58946:58946"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/deluge:/config
      - {{ docker_storage_path }}/media/Anime:/anime
      - {{ docker_storage_path }}/downloads:/download

  dockerproxy:
    <<: *common-keys
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    
  dozzle:
    <<: *common-keys
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8081:8080"
    environment:
      <<: *common-env
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      # DOCKER_HOST: tcp://socket-proxy:2375 # enable when using socket proxy
      DOZZLE_REMOTE_AGENT: 192.168.1.2:7007
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # disable when using socket proxy
      
  filebot:
    <<: *common-keys
    container_name: filebot
    image: jlesage/filebot:latest
    environment:
      <<: *common-env
    ports:
      - "5800:5800"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/filebot:/config
      - /mnt/filebot/output:/output
      - /mnt/filebot/watch:/watch

  freshrss:
    <<: *common-keys
    container_name: freshrss
    image: freshrss/freshrss:latest
    environment:
      <<: *common-env
      OIDC_ENABLED : 1
      OIDC_PROVIDER_METADATA_URL : https://auth.{{ secret_domain }}/application/o/freshrss/.well-known/openid-configuration
      OIDC_CLIENT_ID : {{ secret_freshrss_oidc_client_id }}
      OIDC_CLIENT_SECRET : {{ secret_freshrss_oidc_client_secret }}
      OIDC_X_FORWARDED_HEADERS : X-Forwarded-Port X-Forwarded-Proto X-Forwarded-Host
      OIDC_SCOPES : openid email profile
    networks:
      external_proxy_bridge:
    ports:
      - "8012:80"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/freshrss:/config

  glances:
    <<: *common-keys
    container_name: glances
    image: nicolargo/glances:latest-full
    restart: always
    pid: "host"
    privileged: true
    network_mode: "host"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/run/user/1000/podman/podman.sock:/run/user/1000/podman/podman.sock:ro"
      - {{ docker_home_appdata_path }}/glances:/glances/conf
    environment:
      - TZ=${TZ}
      - "GLANCES_OPT=-C /glances/conf/glances.conf -w"
    # Uncomment for GPU compatibility (Nvidia) inside the container
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  homepage:
    <<: *common-keys
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:latest
    environment:
      <<: *common-env
    ports:
      - 3000:3000
    volumes:
      - {{ docker_home_appdata_path }}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations

  jackett:
    <<: *common-keys
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      <<: *common-env
      AUTO_UPDATE: true #optional
      # RUN_OPTS= #optional
    volumes:
      - {{ docker_home_appdata_path }}/jackett:/config
      - {{ docker_storage_path }}/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  komga:
    <<: *common-keys
    container_name: komga
    image: gotson/komga
    environment:
      <<: *common-env
      KOMGA_OAUTH2_ACCOUNT_CREATION: "true"
    networks:
      external_proxy_bridge:
    ports:
      - "25600:25600"
    volumes:
      - {{ docker_home_appdata_path }}/komga:/config
      - {{ docker_storage_path }}/comics:/data
      - {{ docker_storage_path }}/storage/Books:/books

  maintainerr:
    <<: *common-keys
    container_name: maintainerr
    image: ghcr.io/jorenn92/maintainerr:latest
    environment:
      <<: *common-env
    ports:
      - "6246:6246"
    user: 1000:1000
    volumes:
      - {{ docker_home_appdata_path }}/maintainerr:/opt/data

  mylar3:
    <<: *common-keys
    container_name: mylar3
    image: lscr.io/linuxserver/mylar3:latest
    environment:
      <<: *common-env
    ports:
      - "8090:8090"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/mylar3:/config
      - {{ docker_storage_path }}/downloads:/downloads

  ouroboros:
    <<: *common-keys
    container_name: ouroboros
    image: pyouroboros/ouroboros:latest
    environment:
      <<: *common-env
      CLEANUP: "true"
      CRON: 0 4 * * *
      IGNORE: ""
      LOG_LEVEL: info
      MONITOR: ""
      NOTIFIERS: ""
      REPO_PASS: ""
      REPO_USER: ""
      SELF_UPDATE: "true"
    volumes:
      - *localtime
      - *storage
      - /var/run/docker.sock:/var/run/docker.sock

  overseerr:
    <<: *common-keys
    container_name: overseerr
    image: linuxserver/overseerr:1.33.2
    environment:
      <<: *common-env
    networks:
      external_proxy_bridge:
    ports:
      - "5055:5055"
    volumes:
      - {{ docker_home_appdata_path }}/overseerr:/config

  portainer:
    <<: *common-keys
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H tcp://192.168.1.2:9001 --tlsskipverify
    environment:
      <<: *common-env
    ports:
      - "9000:9000"
    volumes:
      - *localtime
      - *storage
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ docker_home_appdata_path }}/portainer:/data

  prowlarr:
    <<: *common-keys
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    environment:
      <<: *common-env
    ports:
      - "9696:9696"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/prowlarr:/config

  pyload-ng:
    <<: *common-keys
    image: lscr.io/linuxserver/pyload-ng:latest
    container_name: pyload-ng
    environment:
      <<: *common-env
    volumes:
      - {{ docker_home_appdata_path }}/pyload-ng:/config
      - {{ docker_storage_path }}/downloads:/downloads
    ports:
      - 8000:8000
      - 9666:9666 #optional
    restart: unless-stopped

  radarr:
    <<: *common-keys
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    environment:
      <<: *common-env
    ports:
      - "7878:7878"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/radarr:/config
      - {{ docker_storage_path }}/downloads:/downloads
      - {{ docker_storage_path }}/media/Movies:/storage/movies
  
  restic:
    <<: *common-keys
    container_name: restic-server
    image: restic/rest-server:0.13.0
    environment:
      <<: *common-env
    ports:
      - "8500:8000"
    volumes:
      - {{ docker_storage_path }}/backups:/data
  
  sabnzbd:
    <<: *common-keys
    container_name: sabnzbd
    image: lscr.io/linuxserver/sabnzbd:latest
    environment:
      <<: *common-env
    ports:
      - "8080:8080"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/sabnzbd:/config
      - {{ docker_storage_path }}/downloads:/downloads
  
  # https://github.com/AnalogJ/scrutiny
  scrutiny:
    <<: *common-keys
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    environment:
      <<: *common-env
    cap_add:
      - SYS_RAWIO
    ports:
      - "8082:8080" # webapp
      - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ./appdata/scrutiny:/opt/scrutiny/config
      - ./appdata/scrutiny-influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/sde"

  speedtest-tracker:
    <<: *common-keys
    image: lscr.io/linuxserver/speedtest-tracker:latest
    container_name: speedtest-tracker
    environment:
      <<: *common-env
      APP_KEY: {{ secret_speedtest_tracker_app_key }}
      DB_CONNECTION: sqlite
      SPEEDTEST_SCHEDULE: "0 * * * *"
      SPEEDTEST_SERVERS: {{ secret_speedtest_tracker_speedtest_servers }}
      PRUNE_RESULTS_OLDER_THAN: 14 #optional
      DISPLAY_TIMEZONE: America/Los_Angeles
    volumes:
      - {{ docker_home_appdata_path }}/speedtest-tracker:/config
    ports:
      - 8084:80
    restart: unless-stopped

  sonarr:
    <<: *common-keys
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    environment:
      <<: *common-env
    ports:
      - "8989:8989"
    volumes:
      - *localtime
      - *storage
      - {{ docker_home_appdata_path }}/sonarr:/config
      - {{ docker_storage_path }}/downloads:/downloads
      - {{ docker_storage_path }}/media/TV:/storage/tv

  tautulli:
    <<: *common-keys
    container_name: tautulli
    image: lscr.io/linuxserver/tautulli:latest
    environment:
      <<: *common-env
    ports:
      - "8181:8181"
    volumes:
      - {{ docker_home_appdata_path }}/tautulli:/config

  tubearchivist:
    <<: *common-keys
    container_name: tubearchivist
    image: bbilly1/tubearchivist
    ports:
      - 8088:8000
    volumes:
      - tubearchivist-media:/youtube
      - tubearchivist-cache:/cache
    environment:
      <<: *common-env
      ES_URL: http://tubearchivist-es:9200     # needs protocol e.g. http and port
      REDIS_HOST: tubearchivist-redis          # don't add protocol
      HOST_UID: 1000
      HOST_GID: 1000
      TA_HOST: {{ secret_tubearchivist_host }}         # set your host name
      TA_USERNAME: {{ secret_tubearchivist_user }}           # your initial TA credentials
      TA_PASSWORD: {{ secret_tubearchivist_pass }}              # your initial TA credentials
      ELASTIC_PASSWORD: {{ secret_tubearchivist_es_pass }}         # set password for Elasticsearch

      # prevents the browser extension from working and breaks existing users
      # https://docs.tubearchivist.com/configuration/forward-auth/
      # TA_ENABLE_AUTH_PROXY: "true"
      # TA_AUTH_PROXY_USERNAME_HEADER: "HTTP_REMOTE_USER"
      # TA_AUTH_PROXY_LOGOUT_URL: "https://auth.{{ secret_domain }}/logout"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - tubearchivist-es
      - tubearchivist-redis
  
  tubearchivist-redis:
    <<: *common-keys
    image: redis/redis-stack-server
    container_name: tubearchivist-redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - tubearchivist-redis:/data
    depends_on:
      - tubearchivist-es
  
  tubearchivist-es:
    <<: *common-keys
    image: bbilly1/tubearchivist-es         # only for amd64, or use official es 8.14.3
    container_name: tubearchivist-es
    restart: unless-stopped
    environment:
      - "ELASTIC_PASSWORD={{ secret_tubearchivist_es_pass }}"       # matching Elasticsearch password
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "xpack.security.enabled=true"
      - "discovery.type=single-node"
      - "path.repo=/usr/share/elasticsearch/data/snapshot"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - tubearchivist-es:/usr/share/elasticsearch/data    # check for permission error when using bind mount, see readme
    expose:
      - "9200"

  uptimekuma:
    <<: *common-keys
    container_name: uptimekuma
    image: louislam/uptime-kuma:latest
    environment:
      <<: *common-env
    ports:
      - "3001:3001"
    volumes:
      - {{ docker_home_appdata_path }}/uptimekuma:/app/data
      - *localtime
      - *storage
      - /var/run/docker.sock:/var/run/docker.sock:ro

  watchtower:
    <<: *common-keys
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8085:8080
    environment:
      <<: *common-env
      WATCHTOWER_MONITOR_ONLY: 'true'
    command: --interval 30


volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
  tubearchivist-media:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device:  {{ docker_storage_path }}/media/TV/Youtube
  tubearchivist-cache:
  tubearchivist-es:
  tubearchivist-redis:

networks:
  default:
    name: compose_default