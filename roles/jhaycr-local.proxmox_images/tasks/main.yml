---
- name: Ensure image directory exists
  ansible.builtin.file:
    path: "{{ proxmox_image_dir }}"
    state: directory

- name: Download cloud images
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ proxmox_image_dir }}/{{ item.filename }}"
    mode: '0644'
  loop: "{{ proxmox_images }}"
  loop_control:
    label: "{{ item.filename }}"

- name: Ensure VM template exists or create it
  community.proxmox.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_node }}"
    vmid: "{{ item.vmid }}"
    name: "{{ item.name }}"
    memory: "{{ item.memory }}"
    cores: "{{ item.cores }}"
    net:
      net0: "virtio,bridge=vmbr0"  # Correct dictionary format for network
    ide:
      ide2: "{{ item.storage }}:cloudinit"  # Define IDE devices as a dictionary
    scsihw: "virtio-scsi-pci"
    boot: "c"
    bootdisk: "scsi0"
    agent: 1
    serial:
      serial0: "socket"  # Define serial devices as a dictionary
    state: present
  loop: "{{ proxmox_images }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.import | default(false)
  register: vm_creation_result

- name: Import image into Proxmox storage (if VM was just created or needs update)
  ansible.builtin.command:
    cmd: qm importdisk {{ item.vmid }} {{ proxmox_image_dir }}/{{ item.filename }} {{ item.storage }}
  loop: "{{ proxmox_images }}"
  loop_control:
    label: "{{ item.filename }}"
  when: 
    - item.import | default(false)
    - vm_creation_result is changed or (vm_creation_result is not changed and item.force_import | default(false))
  # Use 'force_import' variable to re-import if needed

- name: Attach imported disk and configure VM
  community.proxmox.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_node }}"
    vmid: "{{ item.vmid }}"
    scsi:
      scsi0: "{{ item.storage }}:vm-{{ item.vmid }}-disk-0"
    boot: "c"
    bootdisk: "scsi0"
    ide:
      ide2: "{{ item.storage }}:cloudinit"
    state: present
  loop: "{{ proxmox_images }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.import | default(false)

- name: Convert VM to template (idempotent)
  community.proxmox.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_node }}"
    vmid: "{{ item.vmid }}"
    template: yes
    state: present
  loop: "{{ proxmox_images }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.template | default(true)
  # Setting 'template: yes' is idempotent; won't fail if already a template