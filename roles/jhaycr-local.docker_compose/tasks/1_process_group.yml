---
- name: Process all docker and appdata files
  block:
    - name: Initialize file lists
      ansible.builtin.set_fact:
        docker_compose_files: []
        docker_compose_appdata_files: []
        private: yes

    - name: Gather compose files
      ansible.builtin.set_fact:
        docker_compose_files: "{{ (lookup('ansible.builtin.filetree', playbook_dir + '/' + docker_dir + '/' + inventory_group_name + '/') | 
                                selectattr('state', 'ne', 'directory') |
                                selectattr('path', 'regex', '(.*/)*((docker-compose.*|.env.*)\\.j2)$') |
                                rejectattr('path', 'regex', '.*/appdata/.*') |
                                list) }}"
      run_once: true

    - name: Debug found compose files
      ansible.builtin.debug:
        msg: |
          Found compose files:
          {% for item in (docker_compose_files | unique) %}
          {{ item.src }} -> {{ docker_base_path }}/{{ item.path | regex_replace('^' + inventory_group_name + '/', '') | regex_replace('\\.j2$', '') }}
          {% endfor %}
      when: docker_compose_debug_print | bool

    - name: Gather appdata files
      ansible.builtin.set_fact:
        docker_compose_appdata_files: "{{ (lookup('ansible.builtin.filetree', playbook_dir + '/' + docker_dir + '/' + inventory_group_name + '/') | 
                                        selectattr('state', 'ne', 'directory') |
                                        selectattr('path', 'regex', '.*/appdata/.*\\.j2$') |
                                        list) }}"
      run_once: true

    - name: Debug found appdata files
      ansible.builtin.debug:
        msg: |
          Found appdata files:
          {% for item in (docker_compose_appdata_files | unique) %}
          {{ item.src }} -> {{ docker_appdata_path }}/{{ item.path | regex_replace('/appdata/', '/') | regex_replace('\\.j2$', '') }}
          {% endfor %}
      when: docker_compose_debug_print | bool

    - name: Halt after debug if debug halt is enabled
      ansible.builtin.fail:
        msg: "Halting after debug output as requested"
      when: docker_compose_debug_halt | bool

    - name: Ensure base docker compose directory exists
      ansible.builtin.file:
        path: "{{ docker_base_path }}"
        state: directory
        owner: "{{ appdata_owner | default('1000') }}"
        group: "{{ appdata_group | default('1000') }}"
        mode: '0755'

    - name: Ensure application-specific directories exist
      ansible.builtin.file:
        path: "{{ docker_base_path }}/{{ item.path | regex_replace('^' + inventory_group_name + '/', '') | dirname }}"
        state: directory
        owner: "{{ appdata_owner | default('1000') }}"
        group: "{{ appdata_group | default('1000') }}"
        mode: '0755'
      loop: "{{ docker_compose_files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Template compose files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ docker_base_path }}/{{ item.path | regex_replace('^' + inventory_group_name + '/', '') | regex_replace('\\.j2$', '') }}"
        force: yes
        owner: "{{ appdata_owner | default('1000') }}"
        group: "{{ appdata_group | default('1000') }}"
        mode: '0644'
      loop: "{{ docker_compose_files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Create appdata directories
      ansible.builtin.file:
        path: "{{ docker_appdata_path }}/{{ item.path | regex_replace('/appdata/', '/') | dirname }}"
        state: directory
        owner: "{{ appdata_owner | default('1000') }}"
        group: "{{ appdata_group | default('1000') }}"
        mode: "0755"
      loop: "{{ docker_compose_appdata_files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Template appdata files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ docker_appdata_path }}/{{ item.path | regex_replace('/appdata/', '/') | regex_replace('\\.j2$', '') }}"
        force: yes
        owner: "{{ appdata_owner | default('1000') }}"
        group: "{{ appdata_group | default('1000') }}"
        mode: "0644"
      loop: "{{ docker_compose_appdata_files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Process legacy templates
      when: process_legacy_templates | bool
      block:
        - name: Template root docker-compose.yml
          ansible.builtin.template:
            src: "{{ playbook_dir }}/{{ templates_dir }}/{{ inventory_group_name }}/{{ docker_dir }}/{{ compose_subdir }}/docker-compose.yml.j2"
            dest: "{{ docker_base_path }}/docker-compose.yml"
            force: yes
            owner: "{{ appdata_owner | default('1000') }}"
            group: "{{ appdata_group | default('1000') }}"
            mode: '0644'

        - name: Template root docker-compose.override.yml if exists
          ansible.builtin.template:
            src: "{{ playbook_dir }}/{{ templates_dir }}/{{ inventory_group_name }}/{{ docker_dir }}/{{ compose_subdir }}/docker-compose.override.yml.j2"
            dest: "{{ docker_base_path }}/docker-compose.override.yml"
            force: yes
            owner: "{{ appdata_owner | default('1000') }}"
            group: "{{ appdata_group | default('1000') }}"
            mode: '0644'
          ignore_errors: yes

        - name: Ensure compose-includes directory exists
          ansible.builtin.file:
            path: "{{ docker_base_path }}/compose-includes"
            state: directory
            owner: "{{ appdata_owner | default('1000') }}"
            group: "{{ appdata_group | default('1000') }}"
            mode: '0755'
